#include "CommonCode.ps"

Texture2D diffuseTex : register(t0);
SamplerState diffuseSampler : register(s0);
Texture2D normalTex : register(t1);
SamplerState normalSampler : register(s1);

struct PSInput
{
    float4 position : SV_POSITION;
    float3 normal : NORMAL;
    float4 tangent : TANGENT;
    float2 texCoord : TEXCOORD0;
    float4 worldPos : TEXCOORD1;
    #ifdef NUMSHADOWCOORDS
    float4 shadowPos[NUMSHADOWCOORDS] : TEXCOORD4;
    #endif
};

float3 DecodeNormal(float4 normalInput)
{
    float3 normal;
    normal.xy = normalInput.ag * 2.0 - 1.0;
    normal.z = sqrt(max(1.0 - dot(normal.xy, normal.xy), 0.0));
    return normal;
}

float4 main(PSInput input) : SV_TARGET
{
    float3x3 tbn = float3x3(input.tangent.xyz, cross(input.tangent.xyz, input.normal) * input.tangent.w, input.normal);
    float3 normal = normalize(mul(DecodeNormal(normalTex.Sample(normalSampler, input.texCoord)), tbn));

    #ifdef NUMSHADOWCOORDS
    float4 totalLight = CalculateLighting(input.worldPos, normal, input.shadowPos);
    #else
    float4 totalLight = CalculateLighting(input.worldPos, normal);
    #endif

    return totalLight * diffuseTex.Sample(diffuseSampler, input.texCoord);
}
