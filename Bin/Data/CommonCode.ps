cbuffer PerFramePS : register(b0)
{
    float3 ambientColor;
}

cbuffer LightsPS : register(b3)
{
    float4 lightPositions[4];
    float4 lightDirections[4];
    float4 lightAttenuations[4];
    float4 lightColors[4];
    float4 shadowParameters[4];
    float4 pointShadowParameters[4];
    float4 dirShadowSplits;
    float4 dirShadowFade;
}

Texture2D shadowTex[4] : register(t8);
SamplerComparisonState shadowSampler[4] : register(s8);
TextureCube faceSelectionTex1 : register(t12);
TextureCube faceSelectionTex2 : register(t13);
SamplerState faceSelectionSampler1 : register(s12);
SamplerState faceSelectionSampler2 : register(s13);

float SampleShadowMap(int index, float4 shadowPos)
{
    shadowPos.xyz /= shadowPos.w;
    float2 offsets1 = shadowParameters[index].xy;
    float2 offsets2 = float2(shadowParameters[index].x, -shadowParameters[index].y);

    return (shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy + offsets1, shadowPos.z) +
        shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy - offsets1, shadowPos.z) +
        shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy + offsets2, shadowPos.z) +
        shadowTex[index].SampleCmpLevelZero(shadowSampler[index], shadowPos.xy - offsets2, shadowPos.z)) * 0.25;
}

float4 GetPointShadowPos(int index, float4 worldPos)
{
    float3 lightVec = lightPositions[index].xyz - worldPos.xyz;
    float3 axis = faceSelectionTex1.Sample(faceSelectionSampler1, lightVec).xyz;
    float4 adjust = faceSelectionTex2.Sample(faceSelectionSampler2, lightVec);
    float depth = abs(dot(lightVec, axis));
    // Scale back to avoid cube edge artifacts
    /// \todo Should use shadow map texel size instead of a constant
    float3 normLightVec = (lightVec / depth) * 0.99;
    float2 coords = float2(dot(normLightVec.zxx, axis), dot(normLightVec.yzy, axis)) * adjust.xy + adjust.zw;
    return float4(coords * pointShadowParameters[index].xy + pointShadowParameters[index].zw, shadowParameters[index].z + shadowParameters[index].w / depth, 1);
}

float CalculatePointAtten(int index, float4 worldPos, float3 normal)
{
    float3 lightVec = (lightPositions[index].xyz - worldPos.xyz) * lightAttenuations[index].x;
    float lightDist = length(lightVec);
    float3 localDir = lightVec / lightDist;
    float NdotL = saturate(dot(normal, localDir));
    return NdotL * saturate(1.0 - lightDist * lightDist);
}

float CalculateSpotAtten(int index, float4 worldPos, float3 normal)
{
    float3 lightVec = (lightPositions[index].xyz - worldPos.xyz) * lightAttenuations[index].x;
    float lightDist = length(lightVec);
    float3 localDir = lightVec / lightDist;
    float NdotL = saturate(dot(normal, localDir));
    float spotEffect = dot(localDir, lightDirections[index].xyz);
    float spotAtten = saturate((spotEffect - lightAttenuations[index].y) * lightAttenuations[index].z);
    return NdotL * spotAtten * saturate(1.0 - lightDist * lightDist);
}

float3 CalculateDirLight(int index, float4 worldPos, float3 normal)
{
    float atten = saturate(dot(normal, lightDirections[index].xyz));
    return atten * lightColors[index].rgb;
}

float3 CalculatePointLight(int index, float4 worldPos, float3 normal)
{
    return CalculatePointAtten(index, worldPos, normal) * lightColors[index].rgb;
}

float3 CalculateSpotLight(int index, float4 worldPos, float3 normal)
{
    return CalculateSpotAtten(index, worldPos, normal) * lightColors[index].rgb;
}

#ifdef NUMSHADOWCOORDS
float4 GetDirShadowPos(float depth, float4 shadowPos[NUMSHADOWCOORDS])
{
    #if NUMSHADOWCOORDS == 1
    return shadowPos[0];
    #elif NUMSHADOWCOORDS == 2
    if (depth < dirShadowSplits.x)
        return shadowPos[0];
    else
        return shadowPos[1];
    #elif NUMSHADOWCOORDS == 3
    if (depth < dirShadowSplits.x)
        return shadowPos[0];
    else if (depth < dirShadowSplits.y)
        return shadowPos[1];
    else
        return shadowPos[2];
    #elif NUMSHADOWCOORDS == 4
    if (depth < dirShadowSplits.x)
        return shadowPos[0];
    else if (depth < dirShadowSplits.y)
        return shadowPos[1];
    else if (depth < dirShadowSplits.z)
        return shadowPos[2];
    else
        return shadowPos[3];
    #endif
}

float3 CalculateShadowDirLight(int index, float4 worldPos, float3 normal, float4 shadowPos[NUMSHADOWCOORDS])
{
    float atten = saturate(dot(normal, lightDirections[index].xyz));
    float fade = saturate(worldPos.w * dirShadowFade.y - dirShadowFade.x);
    if (atten > 0 && fade < 1)
        atten *= saturate(fade + SampleShadowMap(index, GetDirShadowPos(worldPos.w, shadowPos)));
    return atten * lightColors[index].rgb;
}

float3 CalculateShadowSpotLight(int index, float4 worldPos, float3 normal, float4 shadowPos)
{
    float atten = CalculateSpotAtten(index, worldPos, normal);
    if (atten > 0)
        atten *= SampleShadowMap(index, shadowPos);
    return atten * lightColors[index].rgb;
}
#endif

float3 CalculateShadowPointLight(int index, float4 worldPos, float3 normal)
{
    float atten = CalculatePointAtten(index, worldPos, normal);
    if (atten > 0)
        atten *= SampleShadowMap(index, GetPointShadowPos(index, worldPos));
    return atten * lightColors[index].rgb;
}

#ifdef NUMSHADOWCOORDS
float4 CalculateLighting(float4 worldPos, float3 normal, float4 shadowPos[NUMSHADOWCOORDS])
#else
float4 CalculateLighting(float4 worldPos, float3 normal)
#endif
{
    #ifdef NUMSHADOWCOORDS
    int shadowIndex = 0;
    #endif

    float4 totalLight = float4(0, 0, 0, 1);
    
    #ifdef AMBIENT
    totalLight.rgb += ambientColor;
    #endif

    #ifdef DIRLIGHT0
    #ifdef SHADOW0
    totalLight.rgb += CalculateShadowDirLight(0, worldPos, normal, shadowPos);
    #else
    totalLight.rgb += CalculateDirLight(0, worldPos, normal);
    #endif
    #endif
    #ifdef DIRLIGHT1
    #ifdef SHADOW1
    totalLight.rgb += CalculateShadowDirLight(1, worldPos, normal, shadowPos);
    #else
    totalLight.rgb += CalculateDirLight(1, worldPos, normal);
    #endif
    #endif
    #ifdef DIRLIGHT2
    #ifdef SHADOW2
    totalLight.rgb += CalculateShadowDirLight(2, worldPos, normal, shadowPos);
    #else
    totalLight.rgb += CalculateDirLight(2, worldPos, normal);
    #endif
    #endif
    #ifdef DIRLIGHT3
    #ifdef SHADOW3
    totalLight.rgb += CalculateShadowDirLight(3, worldPos, normal, shadowPos);
    #else
    totalLight.rgb += CalculateDirLight(3, worldPos, normal);
    #endif
    #endif

    #ifdef POINTLIGHT0
    #ifdef SHADOW0
    totalLight.rgb += CalculateShadowPointLight(0, worldPos, normal);
    #else
    totalLight.rgb += CalculatePointLight(0, worldPos, normal);
    #endif
    #endif
    #ifdef POINTLIGHT1
    #ifdef SHADOW1
    totalLight.rgb += CalculateShadowPointLight(1, worldPos, normal);
    #else
    totalLight.rgb += CalculatePointLight(1, worldPos, normal);
    #endif
    #endif
    #ifdef POINTLIGHT2
    #ifdef SHADOW2
    totalLight.rgb += CalculateShadowPointLight(2, worldPos, normal);
    #else
    totalLight.rgb += CalculatePointLight(2, worldPos, normal);
    #endif
    #endif
    #ifdef POINTLIGHT3
    #ifdef SHADOW3
    totalLight.rgb += CalculateShadowPointLight(3, worldPos, normal);
    #else
    totalLight.rgb += CalculatePointLight(3, worldPos, normal);
    #endif
    #endif
    
    #ifdef SPOTLIGHT0
    #ifdef SHADOW0
    totalLight.rgb += CalculateShadowSpotLight(0, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(0, worldPos, normal);
    #endif
    #endif
    #ifdef SPOTLIGHT1
    #ifdef SHADOW1
    totalLight.rgb += CalculateShadowSpotLight(1, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(1, worldPos, normal);
    #endif
    #endif
    #ifdef SPOTLIGHT2
    #ifdef SHADOW2
    totalLight.rgb += CalculateShadowSpotLight(2, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(2, worldPos, normal);
    #endif
    #endif
    #ifdef SPOTLIGHT3
    #ifdef SHADOW3
    totalLight.rgb += CalculateShadowSpotLight(3, worldPos, normal, shadowPos[shadowIndex++]);
    #else
    totalLight.rgb += CalculateSpotLight(3, worldPos, normal);
    #endif
    #endif

    return totalLight;
}

